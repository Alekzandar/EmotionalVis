# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
output$contents <- renderChart({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
return(df)
package(TableTools)
set.seed(226)
pop = rnorm(200, 36, 8)
mean(pop)
sd(pop)
hist(pop)
hist(samp.vals)
mean(samp.vals)
qqnorm(pop)
summary(pop)
samp.vals = NULL
for(i in 1:10000){
samp = sample(pop, 200, replace = TRUE)
samp.vals[i] = mean(samp)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(pop) + c(-1,1)*1.96*sd(samp.vals)
summary(samp)
set.seed(226)
samp = rnorm(200, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 200")
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 200, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 200, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
qqnorm(samp, main = "qqplot of n = 50")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 50, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 50, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(10, 36, 8)
mean(samp)
set.seed(226)
samp = rnorm(10, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 10")
qqnorm(samp, main = "qqplot of n = 10")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 10, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
LSAT = c( 576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
GPA = c( 3.39, 3.30, 2.81, 3.03, 3.44, 3.07, 3.00, 3.43, 3.36, 3.13, 3.12, 2.74, 2.76, 2.88, 3.96)
cor(LSAT, GPA)
bootstrap = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(q2.LSAT[samp], q2.GPA )
}
bootstrap[i] = cor(LSAT[samp], GPA)
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
sd(bootstrap)
sd(mean.cor)
sd(mean.cor)
sd(cor(LSAT, GPA))
sd(mean.cor)
bootstrap = NULL
mean.cor = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
GPA.samp = GPA[samp]
LSAT.samp = LSAT[samp]
mean.cor[i] = mean(samp)
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
sd(bootstrap)
sd(mean.cor)
753/1000
(.753(1-.753)/1000)^.5
(.753*(1-.753)/1000)^.5
c(.753-1.96 *.014, .753+1.96*.014)
##'5
8/sqrt(200)
sd(samp.vals) / sqrt(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 200")
8/sqrt(200)
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 200, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
qqnorm(samp, main = "qqplot of n = 50")
hist(samp, col = "orange", main  = "Histogram of n = 50")
samp = rnorm(50, 36, 8)
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
qqnorm(samp, main = "qqplot of n = 50")
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 50, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
set.seed(226)
samp = rnorm(10, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 10")
qqnorm(samp, main = "qqplot of n = 10")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 10, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
bootstrap = NULL
mean.cor = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
GPA.samp = GPA[samp]
LSAT.samp = LSAT[samp]
mean.cor[i] = mean(samp)
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
mean(bootstrap)
mean(bootstrap)
median(bootstrap)
(.753*(1-.753)/1000)^.5
c(mean(bootstrap) -1.96 * sd(bootstrap), mean(bootstrap) + 1.96 * sd(bootstrap))
quantile(bootstrap, c(.025, .975))
bootstrap = NULL
mean.cor = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
GPA.samp = GPA[samp]
LSAT.samp = LSAT[samp]
mean.cor[i] = mean(samp)
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
mean(bootstrap)
set.seed(226)
samp = rnorm(200, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 200")
8/sqrt(200)
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
par(mfrow=c(2,2))
set.seed(226)
samp = rnorm(200, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 200")
8/sqrt(200)
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 200, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
qqnorm(samp, main = "qqplot of n = 50")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 50, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(10, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 10")
qqnorm(samp, main = "qqplot of n = 10")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 10, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
LSAT = c( 576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
GPA = c( 3.39, 3.30, 2.81, 3.03, 3.44, 3.07, 3.00, 3.43, 3.36, 3.13, 3.12, 2.74, 2.76, 2.88, 3.96)
cor(LSAT, GPA)
bootstrap = NULL
mean.cor = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
GPA.samp = GPA[samp]
LSAT.samp = LSAT[samp]
mean.cor[i] = mean(samp)
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
mean(bootstrap)
median(bootstrap)
sd(mean.cor)
sd(bootstrap)
c(mean(bootstrap) -1.96 * sd(bootstrap), mean(bootstrap) + 1.96 * sd(bootstrap))
quantile(bootstrap, c(.025, .975))
(.753*(1-.753)/1000)^.5
753/1000
c(.753-1.96 *.014, .753+1.96*.014)
shiny::runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
ggplot(affect)
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
plot(affect$Time, affect$Engagement, type= "1", col = "red")
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
lines(affect$Time, affect$Joy, type = "l", col = "blue")
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/uploadChart')
shiny::runApp('EmotionalVis/Shiny Apps/TableVis')
runApp('EmotionalVis/Shiny Apps/TimeVarVis')
emo <- read.csv('data/emotion_data2.csv', header=TRUE)
setwd("~/Documents/Bucknell/Senior Design/Work in R")
emo <- read.csv('data/emotion_data2.csv', header=TRUE)
emo$joy <- mean(emo$emotions_joy) / 100000 * 1.5
emo$sadness <- mean(emo$emotions_sadness)/100000* 1.5
emo$disgust <- mean(emo$emotions_disgust)/100000* 1.5
emo$contempt <- mean(emo$emotions_contempt)/100000* 1.5
emo$anger <- mean(emo$emotions_anger)/100000* 1.5
emo$fear <- mean(emo$emotions_fear)/100000* 1.5
emo$surprise <- mean(emo$emotions_surprise)/100000* 1.5
emo$valence <- mean(emo$emotions_valence)/ 100000* 1.5
emo$engagement <- mean(emo$emotions_engagement)/ 100000* 1.5
emo2 <- emo %>%
gather(
`joy`,
`sadness`,
`disgust`,
`contempt`,
`anger`,
`fear`,
`surprise`,
`valence`,
`engagement`,
key = "emotion",
value = "value") %>%
select(emotion, value, time, key)
library(tidyverse)
library(devtools)
library(ggplot2)
emo <- read.csv('data/emotion_data2.csv', header=TRUE)
emo$joy <- mean(emo$emotions_joy) / 100000 * 1.5
emo$sadness <- mean(emo$emotions_sadness)/100000* 1.5
emo$disgust <- mean(emo$emotions_disgust)/100000* 1.5
emo$contempt <- mean(emo$emotions_contempt)/100000* 1.5
emo$anger <- mean(emo$emotions_anger)/100000* 1.5
emo$fear <- mean(emo$emotions_fear)/100000* 1.5
emo$surprise <- mean(emo$emotions_surprise)/100000* 1.5
emo$valence <- mean(emo$emotions_valence)/ 100000* 1.5
emo$engagement <- mean(emo$emotions_engagement)/ 100000* 1.5
emo2 <- emo %>%
gather(
`joy`,
`sadness`,
`disgust`,
`contempt`,
`anger`,
`fear`,
`surprise`,
`valence`,
`engagement`,
key = "emotion",
value = "value") %>%
select(emotion, value, time, key)
ggplot(emo2) +
geom_bar(aes(x=emotion, y=value, fill=emotion), stat = "identity") +
facet_wrap(~ key, ncol=2) +
labs(title ="Mean Affectiva Emotions Across Participants", subtitle="June 26, 2017 to July 28, 2017") +
theme_bw()
shiny::runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/TImeVar')
runApp('~/EmotionalVis/Shiny Apps/TImeVar')
runApp('~/EmotionalVis/Shiny Apps/CSVApp')
runApp('~/EmotionalVis/Shiny Apps/TimeVarVis')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
runApp('~/EmotionalVis/Shiny Apps/main')
