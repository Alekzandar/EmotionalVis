barplot(table(sum.nonstandard)/sum(table(sum.nonstandard)),xlab = "Non-Standard 2-Roll Sums", ylab = "Rel. Freq.", main =
"2-Roll Non-Standard Sums")
barplot(table(sum.standard)/sum(table(sum.standard)),xlab = "Standard 2-Roll Sums", ylab = "Rel. Freq.",
main = "2-Roll Standard Sums")
A.rolls = sample(A.faces, 300, replace = TRUE)
B.rolls = sample(B.faces, 300, replace = TRUE)
D.rolls = sample(D.faces, 300, replace = TRUE)
C.rolls = sample(C.faces, 300, replace = TRUE)
A.rolls = sample(A.faces, 300, replace = TRUE)
B.rolls = sample(B.faces, 300, replace = TRUE)
D.rolls = sample(D.faces, 300, replace = TRUE)
C.rolls = sample(C.faces, 300, replace = TRUE)
sum.standard = A.rolls + B.rolls
sum.nonstandard = C.rolls + D.rolls
table(sum.standard)/sum(table(sum.standard))
round(table(sum.standard)/sum(table(sum.standard)))
round(table(sum.standard)/sum(table(sum.standard)),3)
round(table(sum.nonstandard)/sum(table(sum.nonstandard)))
round(table(sum.nonstandard)/sum(table(sum.nonstandard)),.3)
round(table(sum.nonstandard)/sum(table(sum.nonstandard)),3)
A.rolls = sample(A.faces, 3000, replace = TRUE)
B.rolls = sample(B.faces, 3000, replace = TRUE)
D.rolls = sample(D.faces, 3000, replace = TRUE)
C.rolls = sample(C.faces, 3000, replace = TRUE)
sum.standard = A.rolls + B.rolls
sum.nonstandard = C.rolls + D.rolls
round(table(sum.standard)/sum(table(sum.standard)),3)
round(table(sum.nonstandard)/sum(table(sum.nonstandard)),3)
A.rolls = sample(A.faces, 5000, replace = TRUE)
B.rolls = sample(B.faces, 5000, replace = TRUE)
C.rolls = sample(C.faces, 5000, replace = TRUE)
D.rolls = sample(D.faces, 5000, replace = TRUE)
sum.standard = A.rolls + B.rolls
sum.nonstandard = C.rolls + D.rolls
round(table(sum.standard)/sum(table(sum.standard)),3)
#2     3     4     5     6     7     8     9    10    11    12
#0.017 0.080 0.093 0.113 0.170 0.147 0.113 0.123 0.063 0.057 0.023
round(table(sum.nonstandard)/sum(table(sum.nonstandard)),3)
relay = c(0, 1)
probs = c(0.1, 0.9)
A1 = sample(relay, 10000, replace = TRUE, probs)
help(sample)
A2 = sample(relay, 10000, replace = TRUE, probs)
A3 = sample(relay, 10000, replace = TRUE, probs)
A4 = sample(relay, 10000, replace = TRUE, probs)
relays = cbind(A1, A2, A3, A4)
relays[1:4]
relays[:4]
relays[4:]
relays[1:5,]
relays[1:10,] #First five columns of relay
length(which((A1 == 1 | A2 == 1)&(A3==1 | A4 == 1))
length(which((A1 == 1 | A2 == 1)&(A3==1 | A4 == 1)))
length(which((A1 == 1 | A2 == 1)&(A3==1 | A4 == 1)))
length(which((A1 == 1 | A2 == 1)&(A3==1 | A4 == 1)))
length(which((A1 == 1 | A2 == 1)&(A3==1 | A4 == 1))) / sum(A1,A2,A3,A4)
length(which((A1 == 1 | A2 == 1)&(A3==1 | A4 == 1))) / 10000
length(which((A1 == 1 & A2 == 1)|(A3==1 & A4 == 1)))
length(which((A1 == 1 & A2 == 1)|(A3==1 & A4 == 1)))
bearings <- c(47.1, 68.1, 90.8, 103.6, 106.0, 115.0, 126.0, 146.6, 229.0, 240.0, 240.0, 278.0, 278.0, 289.0, 289.0, 367.0, 392.0, 505.0
)
bearings <- c(47.1, 68.1, 90.8, 103.6, 106.0, 115.0, 126.0, 146.6, 229.0, 240.0, 240.0, 278.0, 278.0, 289.0, 289.0, 367.0, 392.0, 505.0)
qqnorm(bearings)
qqnorm(bearings, title = "Q-Q Plot Q92")
qqnorm(bearings, main = "Q-Q Plot Q92")
qqnorm(bearings, main = "Q-Q Plot Question 92")
rainfall <- c(.77,1.20,3.00,1.62,2.81,2.48, 1.74,.47,3.09, 1.31,1.87,.96,.81,1.43,1.51,.32,1.18,1.89,1.20,3.37,2.10,.59,1.35,.90,1.95,2.20,.52,.81,4.75,2.95)
rainfall <- c(.77,1.20,3.00,1.62,2.81,2.48, 1.74,.47,3.09, 1.31,1.87,.96,.81,1.43,1.51,.32,1.18,1.89,1.20,3.37,2.10,.59,1.35,.90,1.95,2.20,.52,.81,4.75,2.95)
rainfall2 <- rainfall^(1/2)
rainfall3 <- rainfall^(1/3)
par(mfrow = c(2, 2))
bearings <- c(47.1, 68.1, 90.8, 103.6, 106.0, 115.0, 126.0, 146.6, 229.0, 240.0, 240.0, 278.0, 278.0, 289.0, 289.0, 367.0, 392.0, 505.0)
qqnorm(bearings, main = "Q-Q Plot Question 92")
rainfall <- c(.77,1.20,3.00,1.62,2.81,2.48, 1.74,.47,3.09, 1.31,1.87,.96,.81,1.43,1.51,.32,1.18,1.89,1.20,3.37,2.10,.59,1.35,.90,1.95,2.20,.52,.81,4.75,2.95)
qqnorm(rainfall, main = "Q-Q Plot Question 94-Standard")
qqnorm(rainfall2, main = "Q-Q Plot Question 94-Sq Root")
rainfall3 <- rainfall^(1/3)
qqnorm(rainfall3, main = "Q-Q Plot Question 94-Cb Root")
par(mfrow = c(2, 2))
bearings <- c(47.1, 68.1, 90.8, 103.6, 106.0, 115.0, 126.0, 146.6, 229.0, 240.0, 240.0, 278.0, 278.0, 289.0, 289.0, 367.0, 392.0, 505.0)
qqnorm(bearings, main = "Q-Q Plot Question 92")
rainfall <- c(.77,1.20,3.00,1.62,2.81,2.48, 1.74,.47,3.09, 1.31,1.87,.96,.81,1.43,1.51,.32,1.18,1.89,1.20,3.37,2.10,.59,1.35,.90,1.95,2.20,.52,.81,4.75,2.95)
qqnorm(rainfall, main = "Q-Q Plot Question 94-Standard")
qqline(rainfall)
rainfall2 <- rainfall^(1/2)
qqnorm(rainfall2, main = "Q-Q Plot Question 94-Sq Root")
qqline(rainfall2)
rainfall3 <- rainfall^(1/3)
qqnorm(rainfall3, main = "Q-Q Plot Question 94-Cb Root")
qqline(rainfall3)
qqline(bearrings)
qqline(bearings)
bearings <- c(47.1, 68.1, 90.8, 103.6, 106.0, 115.0, 126.0, 146.6, 229.0, 240.0, 240.0, 278.0, 278.0, 289.0, 289.0, 367.0, 392.0, 505.0)
qqnorm(bearings, main = "Q-Q Plot Question 92")
qqline(bearings)
rainfall <- c(.77,1.20,3.00,1.62,2.81,2.48, 1.74,.47,3.09, 1.31,1.87,.96,.81,1.43,1.51,.32,1.18,1.89,1.20,3.37,2.10,.59,1.35,.90,1.95,2.20,.52,.81,4.75,2.95)
qqnorm(rainfall, main = "Q-Q Plot Question 94-Standard")
qqline(rainfall)
rainfall2 <- rainfall^(1/2)
qqnorm(rainfall2, main = "Q-Q Plot Question 94-Sq Root")
qqline(rainfall2)
rainfall3 <- rainfall^(1/3)
qqnorm(rainfall3, main = "Q-Q Plot Question 94-Cb Root")
qqline(rainfall3)
shiny::runApp('Downloads/4e0c37fffb0044fc82b6fa5240161cf8')
runApp('Downloads/4e0c37fffb0044fc82b6fa5240161cf8')
runApp('Downloads/4e0c37fffb0044fc82b6fa5240161cf8')
runApp('Downloads/4e0c37fffb0044fc82b6fa5240161cf8')
runApp('Downloads/4e0c37fffb0044fc82b6fa5240161cf8')
runApp('Downloads/4e0c37fffb0044fc82b6fa5240161cf8')
rmarkdown::run
rmarkdown::run
install.packages("DT")
install.packages("quantreg")
install.packages("Hmisc")
shiny::runApp('EmotionalVis/Shiny Apps/uploadChart')
runApp('EmotionalVis/Shiny Apps/CSVApp')
runApp('EmotionalVis/Shiny Apps/uploadChart')
output$contents <- renderGraph({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
output$contents <- renderChart({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
return(df)
package(TableTools)
set.seed(226)
pop = rnorm(200, 36, 8)
mean(pop)
sd(pop)
hist(pop)
hist(samp.vals)
mean(samp.vals)
qqnorm(pop)
summary(pop)
samp.vals = NULL
for(i in 1:10000){
samp = sample(pop, 200, replace = TRUE)
samp.vals[i] = mean(samp)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(pop) + c(-1,1)*1.96*sd(samp.vals)
summary(samp)
set.seed(226)
samp = rnorm(200, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 200")
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 200, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 200, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
qqnorm(samp, main = "qqplot of n = 50")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 50, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 50, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(10, 36, 8)
mean(samp)
set.seed(226)
samp = rnorm(10, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 10")
qqnorm(samp, main = "qqplot of n = 10")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 10, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
LSAT = c( 576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
GPA = c( 3.39, 3.30, 2.81, 3.03, 3.44, 3.07, 3.00, 3.43, 3.36, 3.13, 3.12, 2.74, 2.76, 2.88, 3.96)
cor(LSAT, GPA)
bootstrap = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(q2.LSAT[samp], q2.GPA )
}
bootstrap[i] = cor(LSAT[samp], GPA)
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
sd(bootstrap)
sd(mean.cor)
sd(mean.cor)
sd(cor(LSAT, GPA))
sd(mean.cor)
bootstrap = NULL
mean.cor = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
GPA.samp = GPA[samp]
LSAT.samp = LSAT[samp]
mean.cor[i] = mean(samp)
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
sd(bootstrap)
sd(mean.cor)
753/1000
(.753(1-.753)/1000)^.5
(.753*(1-.753)/1000)^.5
c(.753-1.96 *.014, .753+1.96*.014)
##'5
8/sqrt(200)
sd(samp.vals) / sqrt(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 200")
8/sqrt(200)
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 200, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
qqnorm(samp, main = "qqplot of n = 50")
hist(samp, col = "orange", main  = "Histogram of n = 50")
samp = rnorm(50, 36, 8)
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
qqnorm(samp, main = "qqplot of n = 50")
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 50, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
set.seed(226)
samp = rnorm(10, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 10")
qqnorm(samp, main = "qqplot of n = 10")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 10, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
bootstrap = NULL
mean.cor = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
GPA.samp = GPA[samp]
LSAT.samp = LSAT[samp]
mean.cor[i] = mean(samp)
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
mean(bootstrap)
mean(bootstrap)
median(bootstrap)
(.753*(1-.753)/1000)^.5
c(mean(bootstrap) -1.96 * sd(bootstrap), mean(bootstrap) + 1.96 * sd(bootstrap))
quantile(bootstrap, c(.025, .975))
bootstrap = NULL
mean.cor = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
GPA.samp = GPA[samp]
LSAT.samp = LSAT[samp]
mean.cor[i] = mean(samp)
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
mean(bootstrap)
set.seed(226)
samp = rnorm(200, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 200")
8/sqrt(200)
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
par(mfrow=c(2,2))
set.seed(226)
samp = rnorm(200, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 200")
8/sqrt(200)
qqnorm(samp, main = "qqplot of n = 200")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 200, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(50, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 50")
qqnorm(samp, main = "qqplot of n = 50")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 50, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
set.seed(226)
samp = rnorm(10, 36, 8)
mean(samp)
sd(samp)
hist(samp, col = "orange", main  = "Histogram of n = 10")
qqnorm(samp, main = "qqplot of n = 10")
summary(samp)
samp.vals = NULL
for(i in 1:10000){
samp.i = sample(samp, 10, replace = TRUE)
samp.vals[i] = mean(samp.i)
}
hist(samp.vals)
mean(samp.vals)
sd(samp.vals)
mean(samp) + c(-1,1)*1.96*sd(samp.vals)
sd(samp.vals) / sqrt(length(samp.vals))
LSAT = c( 576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
GPA = c( 3.39, 3.30, 2.81, 3.03, 3.44, 3.07, 3.00, 3.43, 3.36, 3.13, 3.12, 2.74, 2.76, 2.88, 3.96)
cor(LSAT, GPA)
bootstrap = NULL
mean.cor = NULL
for (i in 1:1000){
samp = sample(1:15, 15, replace = TRUE)
bootstrap[i] = cor(LSAT[samp], GPA[samp])
GPA.samp = GPA[samp]
LSAT.samp = LSAT[samp]
mean.cor[i] = mean(samp)
}
hist(bootstrap, col = "orange", main = "Histogram for Bootstrap Dist.")
mean(bootstrap)
median(bootstrap)
sd(mean.cor)
sd(bootstrap)
c(mean(bootstrap) -1.96 * sd(bootstrap), mean(bootstrap) + 1.96 * sd(bootstrap))
quantile(bootstrap, c(.025, .975))
(.753*(1-.753)/1000)^.5
753/1000
c(.753-1.96 *.014, .753+1.96*.014)
shiny::runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TimeVar2')
runApp('EmotionalVis/Shiny Apps/TimeVar2')
runApp('EmotionalVis/Shiny Apps/TimeVar2')
runApp('EmotionalVis/Shiny Apps/TimeVar2')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('EmotionalVis/Shiny Apps/TimeVar2')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('EmotionalVis/Shiny Apps/uploadChart')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('Documents/Bucknell/4337OS_Codes/Section 8/timeSeries')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/uploadChart')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
runApp('EmotionalVis/Shiny Apps/TImeVar')
affect(df$Joy)
affect <- read.csv("../affecttest.csv", sep = "\t", header = TRUE)
runApp('EmotionalVis/Shiny Apps/TImeVar')
